3.2: This question asks you to differentiate static and stack allocation. Use Java and Scheme for your two examples, respectively

A: The 3 topic I choose to differentiate are:
The total amount of space occupied by the program code/data;
The address of a particular library routine;
Variable declaration that corresponds to a particular variable reference;
    Java:
      * Determined by the compile-time of the program code and data.
      * determined when the program is linked. happens when the program is compiled and linked before execution.
      * This is decided during compilation. which are part of source code.
    Scheme:
      * This is determined at runtime, size of data and memory allocation is performed dynamically as the program runs.
      * the address of library routines is determined when the program is linked OR loaded, may resolve some library routines dynamically at load time.
      * Variable binding occurs at runtime, when referenced, the interpreter searches for the corresponding binding dynamically.

3.4: This question asks you to differentiate lifetime and visibility (aka, extent and scope). Use Java and Scheme for your examples

A: 
1. (Java)
public class ScopeExample {
    public static void main(String[] args) {
        if (true) {
            int x = 10; // Variable x is in scope within this block
        } // Variable x goes out of scope here
        // Variable x is not in scope here
        // However, it still exists in memory until its lifetime ends
        int y = 20;
        System.out.println(y); // Variable y is in scope and live here
        // Variable x is not in scope but still live until the method exits
    }
}

2. (Scheme)
(define (outer-function)
  (define x 10) ; Variable x is in scope within this function
  (if #t
      (define y 20) ; Variable y is in scope within this if block
      ) ; Variable y goes out of scope here
  (display x) ; Variable x is still live here even though it's not in scope
  (newline)
  )

(outer-function)

3. (Java again)
public class ParameterScopeExample {
    public static void main(String[] args) {
        int a = 5;
        int b = 10;
        int result = add(a, b); // Variables a and b are in scope and live here
        System.out.println(result);
    }

    public static int add(int x, int y) {
        // Variables x and y are in scope within this method
        // However, they are not live outside this method
        return x + y;
    }
}

3.5: This question asks you to differentiate declaration-order rules, for different languages

A:  C(declaration-order rules):
      names must be declared before use, and the scope of a name extends from its declaration thorugh the end of the block
    C#(declaration-order rules):
      names must be declared before use, but the scope of a name is the entire block in which it is declared.
    Modula-3(declaration-order rules):
      names can be declared in any order, and their scope is the entire block in which they are declared.

3.6: This question asks you to draw stack frames

A:  1. 3
    2. Stack Frames:
        1. main (Static Link: null, Dynamic Link: null)
        - Local variables: g

        2. B (Static Link: main, Dynamic Link: main)
          - Local variables: a, x

        3. R (Static Link: B, Dynamic Link: B)
          - Local variables: m

        4. R (Static Link: B, Dynamic Link: B)
          - Local variables: m

        5. R (Static Link: B, Dynamic Link: B)
          - Local variables: m

        6. A (Static Link: B, Dynamic Link: B)
          - Local variables: n
          
    3.  When 'A' needs to access the variable 'g', it follows the static link back to the containing procedure, 
        which is 'B'. In the 'B' procedure, it finds the variable 'g'. The static link chain allows nested procedures 
        to access variables in their enclosing procedures according to the static scope rules.

3.13: This question asks you to differentiate shallow and deep binding (aka, late and early binding), in dynamically-scoped languages.
      The question asks "What does this program print?" Of course it doesn't print anything. The real question is: 
      What is the result of evaluating the expression (A)?

A: 1. Dynamic Scoping with Shallow Binding:
        the value of a variable is determined by the most recent binding in the call stack.

        after shallow binding this program, the revaluated result is '3'

   2. Dynamic Scoping with Deep Binding:
        the value of a variable is determined by the binding in effect at the time the function was defined.

        after shallow binding this program, the revaluated result is '2'


3.19: This question asks you to differentiate static and dynamic scope and deep and shallow binding

A: 
    (a) the variable references are resolved based on the program's structure and the lexical scope of the 
    variable at the time of declaration.
    
    Static scoping: '3'
    
    (b) In dynamic scoping with deep binding, varialbe references are resolved based on the most recent binding 
    in the call stack.
    
    Dynamic scoping with deep binding: '3'

    (c) In dynamic scoping with shallow binding, variable references are resolved based on the most recent binding 
    in the call stack.
    
    Dynamic scoping with shallow binding: '1'